@* Cumulative/Views/TeacherPage/Edit.cshtml *@
@model Cumulative.Models.Teacher

@{
    ViewData["Title"] = "Edit Teacher";
}

<h2>@ViewData["Title"] - @Model.teacherfname @Model.teacherlname</h2>
<hr />

@* Display overall validation summary *@
<div asp-validation-summary="ModelOnly" class="text-danger"></div>

@* Form posts to the Update action for the specific teacher ID *@
<form asp-action="Update" asp-controller="TeacherPage" asp-route-id="@Model.teacherid" method="post" onsubmit="return ValidateTeacherForm();">
    @Html.AntiForgeryToken() @* Add CSRF token *@

    @* Include teacherid as a hidden field if needed by model binding/validation, though route provides it *@
    <input type="hidden" asp-for="teacherid" />

    <div class="form-group mb-3">
        <label asp-for="teacherfname" class="control-label"></label>
        <input asp-for="teacherfname" class="form-control" />
        <span asp-validation-for="teacherfname" class="text-danger"></span>
        <span id="teacherfnameError" class="text-danger client-validation-error"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="teacherlname" class="control-label"></label>
        <input asp-for="teacherlname" class="form-control" />
        <span asp-validation-for="teacherlname" class="text-danger"></span>
        <span id="teacherlnameError" class="text-danger client-validation-error"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="employeenumber" class="control-label"></label>
        <input asp-for="employeenumber" class="form-control" />
        <span asp-validation-for="employeenumber" class="text-danger"></span>
        <span id="employeenumberError" class="text-danger client-validation-error"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="hiredate" class="control-label"></label>
        @* Format date for input type="date" value attribute *@
        <input asp-for="hiredate" type="date" class="form-control" value="@Model.hiredate?.ToString("yyyy-MM-dd")" />
        <span asp-validation-for="hiredate" class="text-danger"></span>
        <span id="hireDateError" class="text-danger client-validation-error"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="salary" class="control-label"></label>
        <input asp-for="salary" type="number" step="0.01" class="form-control" />
        <span asp-validation-for="salary" class="text-danger"></span>
        <span id="salaryError" class="text-danger client-validation-error"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="teacherworkphone" class="control-label">Work Phone (Optional)</label>
        <input asp-for="teacherworkphone" class="form-control" />
        <span asp-validation-for="teacherworkphone" class="text-danger"></span>
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save Changes</button>
        <a class="btn btn-secondary" asp-action="FindSelectedTeacher" asp-route-id="@Model.teacherid">Cancel</a>
        <a class="btn btn-outline-secondary" asp-action="ListTeachers">Back to List</a> 

    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Use the *exact same* validation function as New.cshtml
        function ValidateTeacherForm() {
            let isValid = true;
            // Clear previous errors
            document.querySelectorAll('.client-validation-error').forEach(el => el.innerHTML = '');

            // First Name Validation
            const fname = document.getElementById("teacherfname").value.trim();
            if (fname === "") {
                document.getElementById("teacherfnameError").innerHTML = "First name is required."; // Initiative: Client Error Handling empty name
                isValid = false;
            }

            // Last Name Validation
            const lname = document.getElementById("teacherlname").value.trim();
             if (lname === "") {
                 document.getElementById("teacherlnameError").innerHTML = "Last name is required."; // Initiative: Client Error Handling empty name
                 isValid = false;
             }

             // Employee Number Basic Format
             const empNum = document.getElementById("employeenumber").value.trim();
             const empNumRegex = /^T\d+$/;
              if (empNum === "") {
                  document.getElementById("employeenumberError").innerHTML = "Employee number is required.";
                  isValid = false;
              } else if (!empNumRegex.test(empNum)) {
                  document.getElementById("employeenumberError").innerHTML = "Employee number must start with 'T' followed by digits (e.g., T123).";
                  isValid = false;
              }

            // Hire Date Validation (Not in future)
            const hireDateInput = document.getElementById("hiredate");
             if (hireDateInput.value) {
                 const hireDate = new Date(hireDateInput.value);
                 const today = new Date();
                 today.setUTCHours(0, 0, 0, 0);
                 const hireDateUTC = new Date(Date.UTC(hireDate.getFullYear(), hireDate.getMonth(), hireDate.getDate()));

                 if (hireDateUTC > today) {
                    document.getElementById("hireDateError").innerHTML = "Hire date cannot be in the future."; // Initiative: Client Error Handling future hire date
                    isValid = false;
                 }
             }


            // Salary Validation (Not negative)
             const salaryInput = document.getElementById("salary");
             if (salaryInput.value !== "") {
                 const salary = parseFloat(salaryInput.value);
                 if (isNaN(salary) || salary < 0) {
                    document.getElementById("salaryError").innerHTML = "Salary cannot be negative."; // Initiative: Client Error Handling negative salary
                    isValid = false;
                 }
             } else {
                  document.getElementById("salaryError").innerHTML = "Salary is required.";
                  isValid = false;
             }

            return isValid;
        }
    </script>
}